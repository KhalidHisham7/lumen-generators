<?php namespace App\Traits;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

trait RESTActions {


    public function all()
    {
        $m = self::MODEL;
        return response()->json([
            'data' => $m::all()
        ], Response::HTTP_OK);
    }

    public function get($id)
    {
        $m = self::MODEL;
        $model = $m::find($id);
        if(is_null($model)){
            return response()->json([
                'message' => "Not found"
            ], Response::HTTP_NOT_FOUND);
        }
        return response()->json([
            'data' => $model
        ], Response::HTTP_OK);
    }

    public function add(Request $request)
    {
        $m = self::MODEL;
        $this->validate($request, $m::$rules);

        $modelName = explode("\\", $m);
        $message = $modelName[2] . " created successfully.";
        return response()->json([
            'data' => $m::create($request->all()),
            'message' => $message
        ], Response::HTTP_CREATED);
    }

    public function put(Request $request, $id)
    {
        $m = self::MODEL;
        $this->validate($request, $m::$rules);
        $model = $m::find($id);
        if(is_null($model)){
            return response()->json([
                'message' => "Not found"
            ], Response::HTTP_NOT_FOUND);
        }
        $model->update($request->all());

        $modelName = explode("\\", $m);
        $message = $modelName[2] . " updated successfully.";
        return response()->json([
            'data' => $model,
            'message' => $message
        ], Response::HTTP_OK);
    }

    public function remove($id)
    {
        $m = self::MODEL;
        if(is_null($m::find($id))){
            return response()->json([
                'message' => "Not found"
            ], Response::HTTP_NOT_FOUND);
        }
        $m::destroy($id);
        return response()->json([
            'message' => "Deleted successfully."
        ], Response::HTTP_OK);
    }

    public function BatchDelete(Request $request)
    {
        if (isset($request['itemsIDs'])) {
        $itemsIDs = explode(',', $request['itemsIDs']);
        foreach ($itemsIDs as $id) {
            $this->remove($id);
          }
          return response()->json([
              'message' => 'Deleted Successfully',
          ]);
        }
    }
}
